// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: workload.proto

#include "workload.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
class X509SVIDRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<X509SVIDRequest>
      _instance;
} _X509SVIDRequest_default_instance_;
class X509SVIDResponse_FederatedBundlesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<X509SVIDResponse_FederatedBundlesEntry_DoNotUse>
      _instance;
} _X509SVIDResponse_FederatedBundlesEntry_DoNotUse_default_instance_;
class X509SVIDResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<X509SVIDResponse>
      _instance;
} _X509SVIDResponse_default_instance_;
class X509SVIDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<X509SVID>
      _instance;
} _X509SVID_default_instance_;
namespace protobuf_workload_2eproto {
void InitDefaultsX509SVIDRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_X509SVIDRequest_default_instance_;
    new (ptr) ::X509SVIDRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::X509SVIDRequest::InitAsDefaultInstance();
}

void InitDefaultsX509SVIDRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsX509SVIDRequestImpl);
}

void InitDefaultsX509SVIDResponse_FederatedBundlesEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_X509SVIDResponse_FederatedBundlesEntry_DoNotUse_default_instance_;
    new (ptr) ::X509SVIDResponse_FederatedBundlesEntry_DoNotUse();
  }
  ::X509SVIDResponse_FederatedBundlesEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsX509SVIDResponse_FederatedBundlesEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsX509SVIDResponse_FederatedBundlesEntry_DoNotUseImpl);
}

void InitDefaultsX509SVIDResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_workload_2eproto::InitDefaultsX509SVID();
  protobuf_workload_2eproto::InitDefaultsX509SVIDResponse_FederatedBundlesEntry_DoNotUse();
  {
    void* ptr = &::_X509SVIDResponse_default_instance_;
    new (ptr) ::X509SVIDResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::X509SVIDResponse::InitAsDefaultInstance();
}

void InitDefaultsX509SVIDResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsX509SVIDResponseImpl);
}

void InitDefaultsX509SVIDImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::_X509SVID_default_instance_;
    new (ptr) ::X509SVID();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::X509SVID::InitAsDefaultInstance();
}

void InitDefaultsX509SVID() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsX509SVIDImpl);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::X509SVIDRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::X509SVIDResponse_FederatedBundlesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::X509SVIDResponse_FederatedBundlesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::X509SVIDResponse_FederatedBundlesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::X509SVIDResponse_FederatedBundlesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::X509SVIDResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::X509SVIDResponse, svids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::X509SVIDResponse, crl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::X509SVIDResponse, federated_bundles_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::X509SVID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::X509SVID, spiffe_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::X509SVID, x509_svid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::X509SVID, x509_svid_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::X509SVID, bundle_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::X509SVIDRequest)},
  { 5, 12, sizeof(::X509SVIDResponse_FederatedBundlesEntry_DoNotUse)},
  { 14, -1, sizeof(::X509SVIDResponse)},
  { 22, -1, sizeof(::X509SVID)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_X509SVIDRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_X509SVIDResponse_FederatedBundlesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_X509SVIDResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_X509SVID_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "workload.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016workload.proto\"\021\n\017X509SVIDRequest\"\266\001\n\020"
      "X509SVIDResponse\022\030\n\005svids\030\001 \003(\0132\t.X509SV"
      "ID\022\013\n\003crl\030\002 \003(\014\022B\n\021federated_bundles\030\003 \003"
      "(\0132\'.X509SVIDResponse.FederatedBundlesEn"
      "try\0327\n\025FederatedBundlesEntry\022\013\n\003key\030\001 \001("
      "\t\022\r\n\005value\030\002 \001(\014:\0028\001\"W\n\010X509SVID\022\021\n\tspif"
      "fe_id\030\001 \001(\t\022\021\n\tx509_svid\030\002 \001(\014\022\025\n\rx509_s"
      "vid_key\030\003 \001(\014\022\016\n\006bundle\030\004 \001(\0142K\n\021SpiffeW"
      "orkloadAPI\0226\n\rFetchX509SVID\022\020.X509SVIDRe"
      "quest\032\021.X509SVIDResponse0\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 394);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "workload.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_workload_2eproto

// ===================================================================

void X509SVIDRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

X509SVIDRequest::X509SVIDRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_workload_2eproto::InitDefaultsX509SVIDRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:X509SVIDRequest)
}
X509SVIDRequest::X509SVIDRequest(const X509SVIDRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:X509SVIDRequest)
}

void X509SVIDRequest::SharedCtor() {
  _cached_size_ = 0;
}

X509SVIDRequest::~X509SVIDRequest() {
  // @@protoc_insertion_point(destructor:X509SVIDRequest)
  SharedDtor();
}

void X509SVIDRequest::SharedDtor() {
}

void X509SVIDRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X509SVIDRequest::descriptor() {
  ::protobuf_workload_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_workload_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const X509SVIDRequest& X509SVIDRequest::default_instance() {
  ::protobuf_workload_2eproto::InitDefaultsX509SVIDRequest();
  return *internal_default_instance();
}

X509SVIDRequest* X509SVIDRequest::New(::google::protobuf::Arena* arena) const {
  X509SVIDRequest* n = new X509SVIDRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void X509SVIDRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:X509SVIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool X509SVIDRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:X509SVIDRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:X509SVIDRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:X509SVIDRequest)
  return false;
#undef DO_
}

void X509SVIDRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:X509SVIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:X509SVIDRequest)
}

::google::protobuf::uint8* X509SVIDRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:X509SVIDRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:X509SVIDRequest)
  return target;
}

size_t X509SVIDRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:X509SVIDRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X509SVIDRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:X509SVIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const X509SVIDRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const X509SVIDRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:X509SVIDRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:X509SVIDRequest)
    MergeFrom(*source);
  }
}

void X509SVIDRequest::MergeFrom(const X509SVIDRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:X509SVIDRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void X509SVIDRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:X509SVIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X509SVIDRequest::CopyFrom(const X509SVIDRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:X509SVIDRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X509SVIDRequest::IsInitialized() const {
  return true;
}

void X509SVIDRequest::Swap(X509SVIDRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void X509SVIDRequest::InternalSwap(X509SVIDRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata X509SVIDRequest::GetMetadata() const {
  protobuf_workload_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_workload_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

X509SVIDResponse_FederatedBundlesEntry_DoNotUse::X509SVIDResponse_FederatedBundlesEntry_DoNotUse() {}
X509SVIDResponse_FederatedBundlesEntry_DoNotUse::X509SVIDResponse_FederatedBundlesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void X509SVIDResponse_FederatedBundlesEntry_DoNotUse::MergeFrom(const X509SVIDResponse_FederatedBundlesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata X509SVIDResponse_FederatedBundlesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_workload_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_workload_2eproto::file_level_metadata[1];
}
void X509SVIDResponse_FederatedBundlesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void X509SVIDResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int X509SVIDResponse::kSvidsFieldNumber;
const int X509SVIDResponse::kCrlFieldNumber;
const int X509SVIDResponse::kFederatedBundlesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

X509SVIDResponse::X509SVIDResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_workload_2eproto::InitDefaultsX509SVIDResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:X509SVIDResponse)
}
X509SVIDResponse::X509SVIDResponse(const X509SVIDResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      svids_(from.svids_),
      crl_(from.crl_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  federated_bundles_.MergeFrom(from.federated_bundles_);
  // @@protoc_insertion_point(copy_constructor:X509SVIDResponse)
}

void X509SVIDResponse::SharedCtor() {
  _cached_size_ = 0;
}

X509SVIDResponse::~X509SVIDResponse() {
  // @@protoc_insertion_point(destructor:X509SVIDResponse)
  SharedDtor();
}

void X509SVIDResponse::SharedDtor() {
}

void X509SVIDResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X509SVIDResponse::descriptor() {
  ::protobuf_workload_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_workload_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const X509SVIDResponse& X509SVIDResponse::default_instance() {
  ::protobuf_workload_2eproto::InitDefaultsX509SVIDResponse();
  return *internal_default_instance();
}

X509SVIDResponse* X509SVIDResponse::New(::google::protobuf::Arena* arena) const {
  X509SVIDResponse* n = new X509SVIDResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void X509SVIDResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:X509SVIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  svids_.Clear();
  crl_.Clear();
  federated_bundles_.Clear();
  _internal_metadata_.Clear();
}

bool X509SVIDResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:X509SVIDResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .X509SVID svids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_svids()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes crl = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_crl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, bytes> federated_bundles = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          X509SVIDResponse_FederatedBundlesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              X509SVIDResponse_FederatedBundlesEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&federated_bundles_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "X509SVIDResponse.FederatedBundlesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:X509SVIDResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:X509SVIDResponse)
  return false;
#undef DO_
}

void X509SVIDResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:X509SVIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .X509SVID svids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->svids_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->svids(static_cast<int>(i)), output);
  }

  // repeated bytes crl = 2;
  for (int i = 0, n = this->crl_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->crl(i), output);
  }

  // map<string, bytes> federated_bundles = 3;
  if (!this->federated_bundles().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "X509SVIDResponse.FederatedBundlesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->federated_bundles().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->federated_bundles().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->federated_bundles().begin();
          it != this->federated_bundles().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<X509SVIDResponse_FederatedBundlesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(federated_bundles_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<X509SVIDResponse_FederatedBundlesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->federated_bundles().begin();
          it != this->federated_bundles().end(); ++it) {
        entry.reset(federated_bundles_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:X509SVIDResponse)
}

::google::protobuf::uint8* X509SVIDResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:X509SVIDResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .X509SVID svids = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->svids_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->svids(static_cast<int>(i)), deterministic, target);
  }

  // repeated bytes crl = 2;
  for (int i = 0, n = this->crl_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->crl(i), target);
  }

  // map<string, bytes> federated_bundles = 3;
  if (!this->federated_bundles().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "X509SVIDResponse.FederatedBundlesEntry.key");
      }
    };

    if (deterministic &&
        this->federated_bundles().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->federated_bundles().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->federated_bundles().begin();
          it != this->federated_bundles().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<X509SVIDResponse_FederatedBundlesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(federated_bundles_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<X509SVIDResponse_FederatedBundlesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->federated_bundles().begin();
          it != this->federated_bundles().end(); ++it) {
        entry.reset(federated_bundles_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:X509SVIDResponse)
  return target;
}

size_t X509SVIDResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:X509SVIDResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .X509SVID svids = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->svids_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->svids(static_cast<int>(i)));
    }
  }

  // repeated bytes crl = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->crl_size());
  for (int i = 0, n = this->crl_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->crl(i));
  }

  // map<string, bytes> federated_bundles = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->federated_bundles_size());
  {
    ::google::protobuf::scoped_ptr<X509SVIDResponse_FederatedBundlesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->federated_bundles().begin();
        it != this->federated_bundles().end(); ++it) {
      entry.reset(federated_bundles_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X509SVIDResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:X509SVIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const X509SVIDResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const X509SVIDResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:X509SVIDResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:X509SVIDResponse)
    MergeFrom(*source);
  }
}

void X509SVIDResponse::MergeFrom(const X509SVIDResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:X509SVIDResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  svids_.MergeFrom(from.svids_);
  crl_.MergeFrom(from.crl_);
  federated_bundles_.MergeFrom(from.federated_bundles_);
}

void X509SVIDResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:X509SVIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X509SVIDResponse::CopyFrom(const X509SVIDResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:X509SVIDResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X509SVIDResponse::IsInitialized() const {
  return true;
}

void X509SVIDResponse::Swap(X509SVIDResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void X509SVIDResponse::InternalSwap(X509SVIDResponse* other) {
  using std::swap;
  svids_.InternalSwap(&other->svids_);
  crl_.InternalSwap(&other->crl_);
  federated_bundles_.Swap(&other->federated_bundles_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata X509SVIDResponse::GetMetadata() const {
  protobuf_workload_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_workload_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void X509SVID::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int X509SVID::kSpiffeIdFieldNumber;
const int X509SVID::kX509SvidFieldNumber;
const int X509SVID::kX509SvidKeyFieldNumber;
const int X509SVID::kBundleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

X509SVID::X509SVID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_workload_2eproto::InitDefaultsX509SVID();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:X509SVID)
}
X509SVID::X509SVID(const X509SVID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  spiffe_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.spiffe_id().size() > 0) {
    spiffe_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spiffe_id_);
  }
  x509_svid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.x509_svid().size() > 0) {
    x509_svid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.x509_svid_);
  }
  x509_svid_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.x509_svid_key().size() > 0) {
    x509_svid_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.x509_svid_key_);
  }
  bundle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bundle().size() > 0) {
    bundle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bundle_);
  }
  // @@protoc_insertion_point(copy_constructor:X509SVID)
}

void X509SVID::SharedCtor() {
  spiffe_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x509_svid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x509_svid_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

X509SVID::~X509SVID() {
  // @@protoc_insertion_point(destructor:X509SVID)
  SharedDtor();
}

void X509SVID::SharedDtor() {
  spiffe_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x509_svid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x509_svid_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void X509SVID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* X509SVID::descriptor() {
  ::protobuf_workload_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_workload_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const X509SVID& X509SVID::default_instance() {
  ::protobuf_workload_2eproto::InitDefaultsX509SVID();
  return *internal_default_instance();
}

X509SVID* X509SVID::New(::google::protobuf::Arena* arena) const {
  X509SVID* n = new X509SVID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void X509SVID::Clear() {
// @@protoc_insertion_point(message_clear_start:X509SVID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  spiffe_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x509_svid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  x509_svid_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bundle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool X509SVID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:X509SVID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string spiffe_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_spiffe_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->spiffe_id().data(), static_cast<int>(this->spiffe_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "X509SVID.spiffe_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes x509_svid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_x509_svid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes x509_svid_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_x509_svid_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes bundle = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bundle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:X509SVID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:X509SVID)
  return false;
#undef DO_
}

void X509SVID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:X509SVID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string spiffe_id = 1;
  if (this->spiffe_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spiffe_id().data(), static_cast<int>(this->spiffe_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "X509SVID.spiffe_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->spiffe_id(), output);
  }

  // bytes x509_svid = 2;
  if (this->x509_svid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->x509_svid(), output);
  }

  // bytes x509_svid_key = 3;
  if (this->x509_svid_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->x509_svid_key(), output);
  }

  // bytes bundle = 4;
  if (this->bundle().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->bundle(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:X509SVID)
}

::google::protobuf::uint8* X509SVID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:X509SVID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string spiffe_id = 1;
  if (this->spiffe_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->spiffe_id().data(), static_cast<int>(this->spiffe_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "X509SVID.spiffe_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->spiffe_id(), target);
  }

  // bytes x509_svid = 2;
  if (this->x509_svid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->x509_svid(), target);
  }

  // bytes x509_svid_key = 3;
  if (this->x509_svid_key().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->x509_svid_key(), target);
  }

  // bytes bundle = 4;
  if (this->bundle().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->bundle(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:X509SVID)
  return target;
}

size_t X509SVID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:X509SVID)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string spiffe_id = 1;
  if (this->spiffe_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->spiffe_id());
  }

  // bytes x509_svid = 2;
  if (this->x509_svid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->x509_svid());
  }

  // bytes x509_svid_key = 3;
  if (this->x509_svid_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->x509_svid_key());
  }

  // bytes bundle = 4;
  if (this->bundle().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bundle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void X509SVID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:X509SVID)
  GOOGLE_DCHECK_NE(&from, this);
  const X509SVID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const X509SVID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:X509SVID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:X509SVID)
    MergeFrom(*source);
  }
}

void X509SVID::MergeFrom(const X509SVID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:X509SVID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.spiffe_id().size() > 0) {

    spiffe_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.spiffe_id_);
  }
  if (from.x509_svid().size() > 0) {

    x509_svid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.x509_svid_);
  }
  if (from.x509_svid_key().size() > 0) {

    x509_svid_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.x509_svid_key_);
  }
  if (from.bundle().size() > 0) {

    bundle_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bundle_);
  }
}

void X509SVID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:X509SVID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void X509SVID::CopyFrom(const X509SVID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:X509SVID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool X509SVID::IsInitialized() const {
  return true;
}

void X509SVID::Swap(X509SVID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void X509SVID::InternalSwap(X509SVID* other) {
  using std::swap;
  spiffe_id_.Swap(&other->spiffe_id_);
  x509_svid_.Swap(&other->x509_svid_);
  x509_svid_key_.Swap(&other->x509_svid_key_);
  bundle_.Swap(&other->bundle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata X509SVID::GetMetadata() const {
  protobuf_workload_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_workload_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
