// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: workload.proto

#include "workload.pb.h"
#include "workload.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* SpiffeWorkloadAPI_method_names[] = {
  "/SpiffeWorkloadAPI/FetchX509SVID",
};

std::unique_ptr< SpiffeWorkloadAPI::Stub> SpiffeWorkloadAPI::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SpiffeWorkloadAPI::Stub> stub(new SpiffeWorkloadAPI::Stub(channel));
  return stub;
}

SpiffeWorkloadAPI::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_FetchX509SVID_(SpiffeWorkloadAPI_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::X509SVIDResponse>* SpiffeWorkloadAPI::Stub::FetchX509SVIDRaw(::grpc::ClientContext* context, const ::X509SVIDRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::X509SVIDResponse>::Create(channel_.get(), rpcmethod_FetchX509SVID_, context, request);
}

::grpc::ClientAsyncReader< ::X509SVIDResponse>* SpiffeWorkloadAPI::Stub::AsyncFetchX509SVIDRaw(::grpc::ClientContext* context, const ::X509SVIDRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::X509SVIDResponse>::Create(channel_.get(), cq, rpcmethod_FetchX509SVID_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::X509SVIDResponse>* SpiffeWorkloadAPI::Stub::PrepareAsyncFetchX509SVIDRaw(::grpc::ClientContext* context, const ::X509SVIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::X509SVIDResponse>::Create(channel_.get(), cq, rpcmethod_FetchX509SVID_, context, request, false, nullptr);
}

SpiffeWorkloadAPI::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SpiffeWorkloadAPI_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SpiffeWorkloadAPI::Service, ::X509SVIDRequest, ::X509SVIDResponse>(
          std::mem_fn(&SpiffeWorkloadAPI::Service::FetchX509SVID), this)));
}

SpiffeWorkloadAPI::Service::~Service() {
}

::grpc::Status SpiffeWorkloadAPI::Service::FetchX509SVID(::grpc::ServerContext* context, const ::X509SVIDRequest* request, ::grpc::ServerWriter< ::X509SVIDResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


