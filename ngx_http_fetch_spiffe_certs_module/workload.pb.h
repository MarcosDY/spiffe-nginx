// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: workload.proto

#ifndef PROTOBUF_workload_2eproto__INCLUDED
#define PROTOBUF_workload_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_workload_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsX509SVIDRequestImpl();
void InitDefaultsX509SVIDRequest();
void InitDefaultsX509SVIDResponse_FederatedBundlesEntry_DoNotUseImpl();
void InitDefaultsX509SVIDResponse_FederatedBundlesEntry_DoNotUse();
void InitDefaultsX509SVIDResponseImpl();
void InitDefaultsX509SVIDResponse();
void InitDefaultsX509SVIDImpl();
void InitDefaultsX509SVID();
inline void InitDefaults() {
  InitDefaultsX509SVIDRequest();
  InitDefaultsX509SVIDResponse_FederatedBundlesEntry_DoNotUse();
  InitDefaultsX509SVIDResponse();
  InitDefaultsX509SVID();
}
}  // namespace protobuf_workload_2eproto
class X509SVID;
class X509SVIDDefaultTypeInternal;
extern X509SVIDDefaultTypeInternal _X509SVID_default_instance_;
class X509SVIDRequest;
class X509SVIDRequestDefaultTypeInternal;
extern X509SVIDRequestDefaultTypeInternal _X509SVIDRequest_default_instance_;
class X509SVIDResponse;
class X509SVIDResponseDefaultTypeInternal;
extern X509SVIDResponseDefaultTypeInternal _X509SVIDResponse_default_instance_;
class X509SVIDResponse_FederatedBundlesEntry_DoNotUse;
class X509SVIDResponse_FederatedBundlesEntry_DoNotUseDefaultTypeInternal;
extern X509SVIDResponse_FederatedBundlesEntry_DoNotUseDefaultTypeInternal _X509SVIDResponse_FederatedBundlesEntry_DoNotUse_default_instance_;

// ===================================================================

class X509SVIDRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:X509SVIDRequest) */ {
 public:
  X509SVIDRequest();
  virtual ~X509SVIDRequest();

  X509SVIDRequest(const X509SVIDRequest& from);

  inline X509SVIDRequest& operator=(const X509SVIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  X509SVIDRequest(X509SVIDRequest&& from) noexcept
    : X509SVIDRequest() {
    *this = ::std::move(from);
  }

  inline X509SVIDRequest& operator=(X509SVIDRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const X509SVIDRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const X509SVIDRequest* internal_default_instance() {
    return reinterpret_cast<const X509SVIDRequest*>(
               &_X509SVIDRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(X509SVIDRequest* other);
  friend void swap(X509SVIDRequest& a, X509SVIDRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline X509SVIDRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  X509SVIDRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const X509SVIDRequest& from);
  void MergeFrom(const X509SVIDRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(X509SVIDRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:X509SVIDRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable int _cached_size_;
  friend struct ::protobuf_workload_2eproto::TableStruct;
  friend void ::protobuf_workload_2eproto::InitDefaultsX509SVIDRequestImpl();
};
// -------------------------------------------------------------------

class X509SVIDResponse_FederatedBundlesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<X509SVIDResponse_FederatedBundlesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<X509SVIDResponse_FederatedBundlesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
    0 > SuperType;
  X509SVIDResponse_FederatedBundlesEntry_DoNotUse();
  X509SVIDResponse_FederatedBundlesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const X509SVIDResponse_FederatedBundlesEntry_DoNotUse& other);
  static const X509SVIDResponse_FederatedBundlesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const X509SVIDResponse_FederatedBundlesEntry_DoNotUse*>(&_X509SVIDResponse_FederatedBundlesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class X509SVIDResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:X509SVIDResponse) */ {
 public:
  X509SVIDResponse();
  virtual ~X509SVIDResponse();

  X509SVIDResponse(const X509SVIDResponse& from);

  inline X509SVIDResponse& operator=(const X509SVIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  X509SVIDResponse(X509SVIDResponse&& from) noexcept
    : X509SVIDResponse() {
    *this = ::std::move(from);
  }

  inline X509SVIDResponse& operator=(X509SVIDResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const X509SVIDResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const X509SVIDResponse* internal_default_instance() {
    return reinterpret_cast<const X509SVIDResponse*>(
               &_X509SVIDResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(X509SVIDResponse* other);
  friend void swap(X509SVIDResponse& a, X509SVIDResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline X509SVIDResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  X509SVIDResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const X509SVIDResponse& from);
  void MergeFrom(const X509SVIDResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(X509SVIDResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .X509SVID svids = 1;
  int svids_size() const;
  void clear_svids();
  static const int kSvidsFieldNumber = 1;
  const ::X509SVID& svids(int index) const;
  ::X509SVID* mutable_svids(int index);
  ::X509SVID* add_svids();
  ::google::protobuf::RepeatedPtrField< ::X509SVID >*
      mutable_svids();
  const ::google::protobuf::RepeatedPtrField< ::X509SVID >&
      svids() const;

  // repeated bytes crl = 2;
  int crl_size() const;
  void clear_crl();
  static const int kCrlFieldNumber = 2;
  const ::std::string& crl(int index) const;
  ::std::string* mutable_crl(int index);
  void set_crl(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_crl(int index, ::std::string&& value);
  #endif
  void set_crl(int index, const char* value);
  void set_crl(int index, const void* value, size_t size);
  ::std::string* add_crl();
  void add_crl(const ::std::string& value);
  #if LANG_CXX11
  void add_crl(::std::string&& value);
  #endif
  void add_crl(const char* value);
  void add_crl(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& crl() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_crl();

  // map<string, bytes> federated_bundles = 3;
  int federated_bundles_size() const;
  void clear_federated_bundles();
  static const int kFederatedBundlesFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      federated_bundles() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_federated_bundles();

  // @@protoc_insertion_point(class_scope:X509SVIDResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::X509SVID > svids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> crl_;
  ::google::protobuf::internal::MapField<
      X509SVIDResponse_FederatedBundlesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_BYTES,
      0 > federated_bundles_;
  mutable int _cached_size_;
  friend struct ::protobuf_workload_2eproto::TableStruct;
  friend void ::protobuf_workload_2eproto::InitDefaultsX509SVIDResponseImpl();
};
// -------------------------------------------------------------------

class X509SVID : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:X509SVID) */ {
 public:
  X509SVID();
  virtual ~X509SVID();

  X509SVID(const X509SVID& from);

  inline X509SVID& operator=(const X509SVID& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  X509SVID(X509SVID&& from) noexcept
    : X509SVID() {
    *this = ::std::move(from);
  }

  inline X509SVID& operator=(X509SVID&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const X509SVID& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const X509SVID* internal_default_instance() {
    return reinterpret_cast<const X509SVID*>(
               &_X509SVID_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(X509SVID* other);
  friend void swap(X509SVID& a, X509SVID& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline X509SVID* New() const PROTOBUF_FINAL { return New(NULL); }

  X509SVID* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const X509SVID& from);
  void MergeFrom(const X509SVID& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(X509SVID* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string spiffe_id = 1;
  void clear_spiffe_id();
  static const int kSpiffeIdFieldNumber = 1;
  const ::std::string& spiffe_id() const;
  void set_spiffe_id(const ::std::string& value);
  #if LANG_CXX11
  void set_spiffe_id(::std::string&& value);
  #endif
  void set_spiffe_id(const char* value);
  void set_spiffe_id(const char* value, size_t size);
  ::std::string* mutable_spiffe_id();
  ::std::string* release_spiffe_id();
  void set_allocated_spiffe_id(::std::string* spiffe_id);

  // bytes x509_svid = 2;
  void clear_x509_svid();
  static const int kX509SvidFieldNumber = 2;
  const ::std::string& x509_svid() const;
  void set_x509_svid(const ::std::string& value);
  #if LANG_CXX11
  void set_x509_svid(::std::string&& value);
  #endif
  void set_x509_svid(const char* value);
  void set_x509_svid(const void* value, size_t size);
  ::std::string* mutable_x509_svid();
  ::std::string* release_x509_svid();
  void set_allocated_x509_svid(::std::string* x509_svid);

  // bytes x509_svid_key = 3;
  void clear_x509_svid_key();
  static const int kX509SvidKeyFieldNumber = 3;
  const ::std::string& x509_svid_key() const;
  void set_x509_svid_key(const ::std::string& value);
  #if LANG_CXX11
  void set_x509_svid_key(::std::string&& value);
  #endif
  void set_x509_svid_key(const char* value);
  void set_x509_svid_key(const void* value, size_t size);
  ::std::string* mutable_x509_svid_key();
  ::std::string* release_x509_svid_key();
  void set_allocated_x509_svid_key(::std::string* x509_svid_key);

  // bytes bundle = 4;
  void clear_bundle();
  static const int kBundleFieldNumber = 4;
  const ::std::string& bundle() const;
  void set_bundle(const ::std::string& value);
  #if LANG_CXX11
  void set_bundle(::std::string&& value);
  #endif
  void set_bundle(const char* value);
  void set_bundle(const void* value, size_t size);
  ::std::string* mutable_bundle();
  ::std::string* release_bundle();
  void set_allocated_bundle(::std::string* bundle);

  // @@protoc_insertion_point(class_scope:X509SVID)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr spiffe_id_;
  ::google::protobuf::internal::ArenaStringPtr x509_svid_;
  ::google::protobuf::internal::ArenaStringPtr x509_svid_key_;
  ::google::protobuf::internal::ArenaStringPtr bundle_;
  mutable int _cached_size_;
  friend struct ::protobuf_workload_2eproto::TableStruct;
  friend void ::protobuf_workload_2eproto::InitDefaultsX509SVIDImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// X509SVIDRequest

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// X509SVIDResponse

// repeated .X509SVID svids = 1;
inline int X509SVIDResponse::svids_size() const {
  return svids_.size();
}
inline void X509SVIDResponse::clear_svids() {
  svids_.Clear();
}
inline const ::X509SVID& X509SVIDResponse::svids(int index) const {
  // @@protoc_insertion_point(field_get:X509SVIDResponse.svids)
  return svids_.Get(index);
}
inline ::X509SVID* X509SVIDResponse::mutable_svids(int index) {
  // @@protoc_insertion_point(field_mutable:X509SVIDResponse.svids)
  return svids_.Mutable(index);
}
inline ::X509SVID* X509SVIDResponse::add_svids() {
  // @@protoc_insertion_point(field_add:X509SVIDResponse.svids)
  return svids_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::X509SVID >*
X509SVIDResponse::mutable_svids() {
  // @@protoc_insertion_point(field_mutable_list:X509SVIDResponse.svids)
  return &svids_;
}
inline const ::google::protobuf::RepeatedPtrField< ::X509SVID >&
X509SVIDResponse::svids() const {
  // @@protoc_insertion_point(field_list:X509SVIDResponse.svids)
  return svids_;
}

// repeated bytes crl = 2;
inline int X509SVIDResponse::crl_size() const {
  return crl_.size();
}
inline void X509SVIDResponse::clear_crl() {
  crl_.Clear();
}
inline const ::std::string& X509SVIDResponse::crl(int index) const {
  // @@protoc_insertion_point(field_get:X509SVIDResponse.crl)
  return crl_.Get(index);
}
inline ::std::string* X509SVIDResponse::mutable_crl(int index) {
  // @@protoc_insertion_point(field_mutable:X509SVIDResponse.crl)
  return crl_.Mutable(index);
}
inline void X509SVIDResponse::set_crl(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:X509SVIDResponse.crl)
  crl_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void X509SVIDResponse::set_crl(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:X509SVIDResponse.crl)
  crl_.Mutable(index)->assign(std::move(value));
}
#endif
inline void X509SVIDResponse::set_crl(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  crl_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:X509SVIDResponse.crl)
}
inline void X509SVIDResponse::set_crl(int index, const void* value, size_t size) {
  crl_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:X509SVIDResponse.crl)
}
inline ::std::string* X509SVIDResponse::add_crl() {
  // @@protoc_insertion_point(field_add_mutable:X509SVIDResponse.crl)
  return crl_.Add();
}
inline void X509SVIDResponse::add_crl(const ::std::string& value) {
  crl_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:X509SVIDResponse.crl)
}
#if LANG_CXX11
inline void X509SVIDResponse::add_crl(::std::string&& value) {
  crl_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:X509SVIDResponse.crl)
}
#endif
inline void X509SVIDResponse::add_crl(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  crl_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:X509SVIDResponse.crl)
}
inline void X509SVIDResponse::add_crl(const void* value, size_t size) {
  crl_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:X509SVIDResponse.crl)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
X509SVIDResponse::crl() const {
  // @@protoc_insertion_point(field_list:X509SVIDResponse.crl)
  return crl_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
X509SVIDResponse::mutable_crl() {
  // @@protoc_insertion_point(field_mutable_list:X509SVIDResponse.crl)
  return &crl_;
}

// map<string, bytes> federated_bundles = 3;
inline int X509SVIDResponse::federated_bundles_size() const {
  return federated_bundles_.size();
}
inline void X509SVIDResponse::clear_federated_bundles() {
  federated_bundles_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
X509SVIDResponse::federated_bundles() const {
  // @@protoc_insertion_point(field_map:X509SVIDResponse.federated_bundles)
  return federated_bundles_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
X509SVIDResponse::mutable_federated_bundles() {
  // @@protoc_insertion_point(field_mutable_map:X509SVIDResponse.federated_bundles)
  return federated_bundles_.MutableMap();
}

// -------------------------------------------------------------------

// X509SVID

// string spiffe_id = 1;
inline void X509SVID::clear_spiffe_id() {
  spiffe_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& X509SVID::spiffe_id() const {
  // @@protoc_insertion_point(field_get:X509SVID.spiffe_id)
  return spiffe_id_.GetNoArena();
}
inline void X509SVID::set_spiffe_id(const ::std::string& value) {
  
  spiffe_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:X509SVID.spiffe_id)
}
#if LANG_CXX11
inline void X509SVID::set_spiffe_id(::std::string&& value) {
  
  spiffe_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:X509SVID.spiffe_id)
}
#endif
inline void X509SVID::set_spiffe_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  spiffe_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:X509SVID.spiffe_id)
}
inline void X509SVID::set_spiffe_id(const char* value, size_t size) {
  
  spiffe_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:X509SVID.spiffe_id)
}
inline ::std::string* X509SVID::mutable_spiffe_id() {
  
  // @@protoc_insertion_point(field_mutable:X509SVID.spiffe_id)
  return spiffe_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* X509SVID::release_spiffe_id() {
  // @@protoc_insertion_point(field_release:X509SVID.spiffe_id)
  
  return spiffe_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void X509SVID::set_allocated_spiffe_id(::std::string* spiffe_id) {
  if (spiffe_id != NULL) {
    
  } else {
    
  }
  spiffe_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), spiffe_id);
  // @@protoc_insertion_point(field_set_allocated:X509SVID.spiffe_id)
}

// bytes x509_svid = 2;
inline void X509SVID::clear_x509_svid() {
  x509_svid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& X509SVID::x509_svid() const {
  // @@protoc_insertion_point(field_get:X509SVID.x509_svid)
  return x509_svid_.GetNoArena();
}
inline void X509SVID::set_x509_svid(const ::std::string& value) {
  
  x509_svid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:X509SVID.x509_svid)
}
#if LANG_CXX11
inline void X509SVID::set_x509_svid(::std::string&& value) {
  
  x509_svid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:X509SVID.x509_svid)
}
#endif
inline void X509SVID::set_x509_svid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  x509_svid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:X509SVID.x509_svid)
}
inline void X509SVID::set_x509_svid(const void* value, size_t size) {
  
  x509_svid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:X509SVID.x509_svid)
}
inline ::std::string* X509SVID::mutable_x509_svid() {
  
  // @@protoc_insertion_point(field_mutable:X509SVID.x509_svid)
  return x509_svid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* X509SVID::release_x509_svid() {
  // @@protoc_insertion_point(field_release:X509SVID.x509_svid)
  
  return x509_svid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void X509SVID::set_allocated_x509_svid(::std::string* x509_svid) {
  if (x509_svid != NULL) {
    
  } else {
    
  }
  x509_svid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), x509_svid);
  // @@protoc_insertion_point(field_set_allocated:X509SVID.x509_svid)
}

// bytes x509_svid_key = 3;
inline void X509SVID::clear_x509_svid_key() {
  x509_svid_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& X509SVID::x509_svid_key() const {
  // @@protoc_insertion_point(field_get:X509SVID.x509_svid_key)
  return x509_svid_key_.GetNoArena();
}
inline void X509SVID::set_x509_svid_key(const ::std::string& value) {
  
  x509_svid_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:X509SVID.x509_svid_key)
}
#if LANG_CXX11
inline void X509SVID::set_x509_svid_key(::std::string&& value) {
  
  x509_svid_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:X509SVID.x509_svid_key)
}
#endif
inline void X509SVID::set_x509_svid_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  x509_svid_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:X509SVID.x509_svid_key)
}
inline void X509SVID::set_x509_svid_key(const void* value, size_t size) {
  
  x509_svid_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:X509SVID.x509_svid_key)
}
inline ::std::string* X509SVID::mutable_x509_svid_key() {
  
  // @@protoc_insertion_point(field_mutable:X509SVID.x509_svid_key)
  return x509_svid_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* X509SVID::release_x509_svid_key() {
  // @@protoc_insertion_point(field_release:X509SVID.x509_svid_key)
  
  return x509_svid_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void X509SVID::set_allocated_x509_svid_key(::std::string* x509_svid_key) {
  if (x509_svid_key != NULL) {
    
  } else {
    
  }
  x509_svid_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), x509_svid_key);
  // @@protoc_insertion_point(field_set_allocated:X509SVID.x509_svid_key)
}

// bytes bundle = 4;
inline void X509SVID::clear_bundle() {
  bundle_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& X509SVID::bundle() const {
  // @@protoc_insertion_point(field_get:X509SVID.bundle)
  return bundle_.GetNoArena();
}
inline void X509SVID::set_bundle(const ::std::string& value) {
  
  bundle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:X509SVID.bundle)
}
#if LANG_CXX11
inline void X509SVID::set_bundle(::std::string&& value) {
  
  bundle_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:X509SVID.bundle)
}
#endif
inline void X509SVID::set_bundle(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  bundle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:X509SVID.bundle)
}
inline void X509SVID::set_bundle(const void* value, size_t size) {
  
  bundle_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:X509SVID.bundle)
}
inline ::std::string* X509SVID::mutable_bundle() {
  
  // @@protoc_insertion_point(field_mutable:X509SVID.bundle)
  return bundle_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* X509SVID::release_bundle() {
  // @@protoc_insertion_point(field_release:X509SVID.bundle)
  
  return bundle_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void X509SVID::set_allocated_bundle(::std::string* bundle) {
  if (bundle != NULL) {
    
  } else {
    
  }
  bundle_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bundle);
  // @@protoc_insertion_point(field_set_allocated:X509SVID.bundle)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_workload_2eproto__INCLUDED
